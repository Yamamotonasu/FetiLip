rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{user} {
      allow create: if true;
    }
    match /version/1/users/{userID} {
      allow create:
      // 認証済みである
      if isAnyAuthenticated()
      && isValidateUser(incomingData())
      && (!('userName' in request.resource.data) || validateString(incomingData().userName, 2, 12));
      allow update: if isUserAuthenticated(userID);
      allow get: if isAnyAuthenticated();
      allow read: if isAnyAuthenticated();
    }
    match /version/1/posts/{postID} {
      allow create:
      if isAnyAuthenticated()
      && incomingData().userRef == userDocumentPath(request.auth.uid)
      && isNullOrString(incomingData().review);
      allow read: if isAnyAuthenticated();
    }

    // - region auth functions

    function isAnyAuthenticated() {
      return request.auth != null;
    }
    
    function isUserAuthenticated(userID) {
      return isAnyAuthenticated() && userID == request.auth.uid;
    }

    // - region validate functions common
    
    // request.resource.dataへのアクセス簡略化
    function incomingData() {
      return request.resource.data;
    }
    
    function validateString(text, min, max) {
      return text is string && min <= text.size() && text.size() <= max;
    }
    
    // Integer型のフィールドの値ののValidationを設定する
    //
    // @param num 検証する値
    // @param min 最小値
    // @param max 最大値
    function validateInt(value, min, max) {
      return value is int && min <= value && value <= max;
    }

    // null 又は stringならtrueを返す
    //
    // @param value 検証する値
    function isNullOrString(value) {
      return value == null || value is string
    }

    // - region users

    // users collectionのスキーマ検証用関数
    //
    // Schemeの数は3つである
    // userNameは必須 && String型
    // updatedAtは必須 && Timestamp型
    // createdAtは必須 && Timestamp型
    function isValidateUser(user) {
      return user.size() == 3
      && 'userName' in user && user.userName is string
      && 'updatedAt' in user && user.updatedAt is timestamp
      && 'createdAt' in user && user.createdAr is timestamp;
    }

    // usersのドキュメントReferenceを作成
    function userDocumentPath(uid) {
      return /databases/{database}/documents/version/1/users/$(uid);
    }
  }
}